services:
  # Service for the Axium application
  axium:
    # Build the Docker image from the current directory using the specified Dockerfile
    build:
      context: .
      dockerfile: Dockerfile

    # Map ports from the container to the host machine
    ports:
      - "${SERVER_PORT:-3000}:${SERVER_PORT:-3000}" # Expose server port

    # Environment variables for the service
    environment:
      # ==============================
      # ‚öôÔ∏è GENERAL CONFIGURATION
      # ==============================
      - ENVIRONMENT=${ENVIRONMENT:-development} # "production"

      # ==============================
      # üåç SERVER CONFIGURATION
      # ==============================
      - SERVER_IP=${SERVER_IP:-127.0.0.1}
      - SERVER_PORT=${SERVER_PORT:-8000}
      - SERVER_TRACE_ENABLED=${SERVER_TRACE_ENABLED:-true}
      - SERVER_WORKER_THREADS=${SERVER_WORKER_THREADS:-2}

      # ==============================
      # üîí HTTPS CONFIGURATION
      # ==============================
      - SERVER_HTTPS_ENABLED=${SERVER_HTTPS_ENABLED:-false}
      - SERVER_HTTPS_HTTP2_ENABLED=${SERVER_HTTPS_HTTP2_ENABLED:-true}
      - SERVER_HTTPS_CERT_FILE_PATH=${SERVER_HTTPS_CERT_FILE_PATH:-/app/certs/cert.pem}
      - SERVER_HTTPS_KEY_FILE_PATH=${SERVER_HTTPS_KEY_FILE_PATH:-/app/certs/key.pem}

      # ==============================
      # üö¶ RATE LIMIT CONFIGURATION
      # ==============================
      - SERVER_RATE_LIMIT=${SERVER_RATE_LIMIT:-5}
      - SERVER_RATE_LIMIT_PERIOD=${SERVER_RATE_LIMIT_PERIOD:-1}

      # ==============================
      # üì¶ COMPRESSION CONFIGURATION
      # ==============================
      - SERVER_COMPRESSION_ENABLED=${SERVER_COMPRESSION_ENABLED:-true}
      - SERVER_COMPRESSION_LEVEL=${SERVER_COMPRESSION_LEVEL:-6}

      # ==============================
      # üîë AUTHENTICATION CONFIGURATION
      # ==============================
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-fgr4fe34w2rfTwfe3444234edfewfw4e#f$#wferg23w2DFSdf}
      - JWT_ISSUER=${JWT_ISSUER:-your_issuer} # Set this to your desired issuer value
      - JWT_AUDIENCE=${JWT_AUDIENCE:-your_audience} # Set this to your desired audience value
      - JWT_ALLOW_COOKIE_AUTH=${JWT_ALLOW_COOKIE_AUTH:-true}
      - JWT_FORCE_COOKIE_AUTH=${JWT_FORCE_COOKIE_AUTH:-false}
      - JWT_COOKIE_NAME=${JWT_COOKIE_NAME:-auth_token}
      - JWT_COOKIE_MAX_AGE=${JWT_COOKIE_MAX_AGE:-604800} # 7 days in seconds
      - JWT_COOKIE_SAMESITE=${JWT_COOKIE_SAMESITE:-Lax}

      # ==============================
      # üåê CORS CONFIGURATION
      # ==============================
      - CORS_ALLOW_ORIGIN=${CORS_ALLOW_ORIGIN:-http://127.0.0.1:3000}
      - CORS_ALLOW_METHODS=${CORS_ALLOW_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      - CORS_ALLOW_HEADERS=${CORS_ALLOW_HEADERS:-Authorization,Content-Type,Origin}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}
      - CORS_MAX_AGE=${CORS_MAX_AGE:-3600}

      # ==============================
      # üõ¢Ô∏è DATABASE CONFIGURATION
      # ==============================
      - DATABASE_URL=${DATABASE_URL:-postgres://dbuser:1234@localhost/axium}
      - DATABASE_USER=${DATABASE_USER:-dbuser}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-1234}
      - DATABASE_DB=${DATABASE_DB:-axium}
      - DATABASE_MAX_CONNECTIONS=${DATABASE_MAX_CONNECTIONS:-20}
      - DATABASE_MIN_CONNECTIONS=${DATABASE_MIN_CONNECTIONS:-5}

      # ==============================
      # ‚òÅÔ∏è STORAGE (S3/MINIO) CONFIGURATION
      # ==============================
      - STORAGE_ENDPOINT=${STORAGE_HOST:-http://127.0.0.1}
      - STORAGE_PORT=${STORAGE_PORT:-9000}
      - STORAGE_CONSOLE_PORT=${STORAGE_CONSOLE_PORT:-9001}
      - STORAGE_REGION=${STORAGE_REGION:-us-east-1}
      - STORAGE_ACCESS_KEY=${STORAGE_ACCESS_KEY:-minioadmin}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY:-minioadmin}
      - STORAGE_BUCKET_PROFILE_PICTURES=${STORAGE_BUCKET_PROFILE_PICTURES:-profile-pictures}

      # ==============================
      # üü¢ CACHE (REDIS) CONFIGURATION
      # ==============================
      - CACHE_ENDPOINT=${CACHE_ENDPOINT:-127.0.0.1}
      - CACHE_PORT=${CACHE_PORT:-6379}
      - CACHE_USERNAME=${CACHE_USERNAME:-}
      - CACHE_PASSWORD=${CACHE_PASSWORD:-}
      - CACHE_DB=${CACHE_DB:-0}

      # ==============================
      # üìß MAIL (SMTP) CONFIGURATION
      # ==============================
      - MAIL_SERVER=${MAIL_SERVER:-smtp.example.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USER=${MAIL_USER:-your@email.com}
      - MAIL_PASS=${MAIL_PASS:-your_smtp_password}

    # Depend on the database service and wait until it's healthy
    depends_on:
      db:
        condition: service_healthy
      storage:
        condition: service_healthy
      cache:
        condition: service_healthy

    # Mount volumes for certificates
    volumes:
      - ./certs:/app/certs  # Mount local certs directory to container

    # Health check settings
    healthcheck:
      # Test the health of the service by checking the /health endpoint
      test: ["CMD", "curl", "-f", "http://${SERVER_IP:-0.0.0.0}:${SERVER_PORT:-3000}/health"]
      interval: 10s # Check every 10 seconds
      timeout: 5s # Timeout after 5 seconds
      retries: 3 # Retry up to 3 times
      start_period: 15s # Wait 15 seconds before starting checks

    # Resource limits for the service
    deploy:
      resources:
        limits:
          # Limit CPU usage (default: 0.5 cores)
          cpus: '${AXIUM_CPU_LIMIT:-0.5}'
          # Limit RAM usage (default: 512MB)
          memory: ${AXIUM_MEMORY_LIMIT:-512M}

  # Service for the PostgreSQL database
  db:
    # Use the official PostgreSQL 17 Alpine image
    image: postgres:17-alpine

    # Always restart the container if it fails
    restart: always

    # Environment variables for the database
    environment:
      # Set database user, password, and database name
      - POSTGRES_USER=${DATABASE_USER:-dbuser}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-1234}
      - POSTGRES_DB=${DATABASE_DB:-axium}

    # Map the database port to the host machine
    ports:
      - "5432:5432" # Expose PostgreSQL port

    # Mount volumes for database data and logs
    volumes:
      - ./docker/db/data:/var/lib/postgresql/data   # Store database data
      - ./docker/db/logs:/var/log/postgresql        # Store logs

    # Health check settings for the database
    healthcheck:
      # Test the health of the database using pg_isready
      test: ["CMD", "pg_isready", "-U", "${DATABASE_USER:-dbuser}"]
      interval: 60s # Check every minute
      timeout: 10s # Timeout after 10 seconds
      retries: 5 # Retry up to 5 times
      start_period: 15s # Wait 15 seconds before starting checks

    # Resource limits for the database service
    deploy:
      resources:
        limits:
          # Limit CPU usage (default: 0.5 cores)
          cpus: '${DB_CPU_LIMIT:-0.5}'
          # Limit RAM usage (default: 256MB)
          memory: ${DB_MEMORY_LIMIT:-256M}

  storage:
    image: minio/minio
    command: server /data --console-address ":${MINIO_CONSOLE_PORT:-9001}" --address ":${MINIO_PORT:-9000}"
    ports:
     - "${STORAGE_PORT:-9000}:${STORAGE_PORT:-9000}"
     - "${STORAGE_CONSOLE_PORT:-9001}:${STORAGE_CONSOLE_PORT:-9001}"
    environment:
      - MINIO_ROOT_USER=${STORAGE_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${STORAGE_SECRET_KEY:-minioadmin}
    volumes:
      - ./docker/storage/data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${STORAGE_PORT:-9000}/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Redis Service
  cache:
    image: redis:latest
    ports:
      - "${CACHE_PORT:-6379}:${CACHE_PORT:-6379}"  # Expose Redis port
    environment:
      - REDIS_PASSWORD=${CACHE_PASSWORD:-}  # Set Redis password if configured
      - REDIS_USER=${CACHE_USERNAME:-}  # Redis username if applicable
      - REDIS_DB=${CACHE_DB:-0}  # Default Redis DB
    volumes:
      - ./docker/cache/data:/data  # Persist Redis data
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "${CACHE_PORT:-6379}", "PING"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
